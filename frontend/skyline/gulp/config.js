var fs = require('fs'),
  path = require('path'),
  crypto = require('crypto'),
  md5sum = crypto.createHash('md5'),

  buildConfig = require('../build.config.js'),
  packageConfig = require('../package.json'),
  jshintOptions = JSON.parse(fs.readFileSync(path.resolve(__dirname, '../.jshintrc')));

var configFile = path.resolve(__dirname, '../app.config.js'),
  configFileTemplate = path.resolve(__dirname, '../app.config.tpl.js');
function checkConfig() {
  if (fs.existsSync(configFile)) {
    var oldConf = require(configFile),
      templateConfig = require(configFileTemplate);
    for (var key in templateConfig) {
      if (!oldConf.hasOwnProperty(key)) {
        console.info('File %s will be updated.', configFile);
        fs.writeFileSync(configFile, fs.readFileSync(configFileTemplate));
        return;
      }
    }
    return;
  }
  console.info('File %s will be autogenerated.', configFile);
  fs.writeFileSync(configFile, fs.readFileSync(configFileTemplate));
}

checkConfig();
var appConf = require(configFile);

buildConfig.build_dir_root = buildConfig.build_dir;
buildConfig.compile_dir_root = buildConfig.compile_dir;
buildConfig.compile_dir = buildConfig.compile_dir + '/' + appConf.relativePath;
buildConfig.build_dir = buildConfig.build_dir + '/' + appConf.relativePath;

md5sum.update(Date.now().toString());
var currentTime = md5sum.digest('hex').substr(0, 6);

module.exports = {
  appConf: appConf,
  buildConfig: buildConfig,
  packageConfig: packageConfig,
  jshintOptions: jshintOptions,
  currentTime: currentTime
};
