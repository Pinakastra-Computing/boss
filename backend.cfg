[buildout]
extends =
    base.cfg

# relative-paths = true

backend_develop =
  backend
  lib
  boss_client

develop = ${:backend_develop}


backend_parts =
  boss_backend
  i18n-compile
  generate-version

parts = ${:backend_parts}

[boss_backend]
recipe = zc.recipe.egg:scripts
eggs =
  boss_backend
  pytest
  pytest-cov
  coverage
  sphinx
initialization =
    if "backend" in __file__: from view import admin_api_handler, cabinet_api_handler, all_api_handler
interpreter = pyb
entry-points =
  ipyb=IPython:start_ipython


[i18n-compile]
recipe = collective.recipe.cmd
on_install = true
on_update = true
cmds = ${buildout:bin-directory}/i18n compile

[versions]
babel=>2.0.2
logbook=0.9.1
pyparsing=2.0.3


[generate-version]
recipe = collective.recipe.cmd:py
on_install = true
on_update = true
cmds =
  >>> import os, sys
  >>> import datetime
  >>> build_date = datetime.datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
  >>> build_number = os.environ.get("BUILD_NUMBER")
  >>> if not build_number:
  ...      try:
  ...         with open(os.path.join(buildout["buildout"]["directory"], "BUILD_NUMBER")) as f:
  ...             build_number = f.read().rstrip()
  ...      except IOError:
  ...         build_number = 1
  >>> with open(os.path.join(buildout["buildout"]["directory"], "build"), 'w') as f:
  ...      f.write('version: {"date": "%s", "build": %s}\n' % (build_date, build_number))
